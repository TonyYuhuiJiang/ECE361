#
# Copyright 2020 University of Toronto
#
# Permission is hereby granted, to use this software and associated
# documentation files (the "Software") in course work at the University
# of Toronto, or for personal use. Other uses are prohibited, in
# particular the distribution of the Software either publicly or to third
# parties.
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from random import expovariate, seed
from collections import deque

__all__ = ['StationMetadata', 'FrameMetadata', 'StationArrivals']

class StationArrivals(object):
    """
    This class generates a list of frame arrival times for a set of stations.
    The initial arrival pattern is generated by using exponential inter-arrival
    times, but we ensure the frames are separated by at a time length of at
    least 1 serializationDelay. This models the stations with no buffers.
    """

    def __init__(self, numStations = None, numFramesPerStn = None,
                serializationDelay = None, arrivalRate = None, seedVal = -1):
        assert type(numStations) is int and numStations > 0
        assert type(numFramesPerStn) is int and numFramesPerStn > 0
        assert type(serializationDelay) is float and serializationDelay > 0
        assert type(arrivalRate) is float and arrivalRate > 0

        self.numStations = numStations
        self.numFramesPerStn = numFramesPerStn
        self.serializationDelay = serializationDelay
        self.arrivalRate = arrivalRate

        if seedVal >= 0:
            seed(seedVal)

        # Dict of Deques
        #   - Key is station ID
        #   - Value is a Deque of packet arrival times
        self.stnPktArrTimes = self._generateArrivals()

    def _generateArrivals(self):
        """
        Generates a list of arrival times for all stations
        """

        packetArrivals = {}
        for stnID in range(self.numStations):
            arrTimes = [0.0] * self.numFramesPerStn
            for i in range(self.numFramesPerStn):
                # Since we assume there's no buffering at stations, transmissions must
                # be at least 1 SERIALIZATION_DELAY apart
                interArrivalTime = 0
                while (interArrivalTime < self.serializationDelay):
                    interArrivalTime = expovariate(self.arrivalRate)

                arrTimes[i] = arrTimes[i - 1] + interArrivalTime

            # Convert to deque here, rather than at the start, since insertion/modification in
            # the middle of a deque is extremely slow (under-the-hood, it's a linked of arrays)
            packetArrivals[stnID] = deque(arrTimes)

        return packetArrivals

    def getNextArrival(self):
        """
        Returns a FrameMetadata object representing the next scheduled arrival.
        Returns None if all stations have completed all their transmissions.
        """

        # Figure out which station has the next earliest arrival
        stationID = None
        minTime = float('inf')
        for stnID in range(self.numStations):
            if len(self.stnPktArrTimes[stnID]) == 0:
                # This station has transmitted all its frames
                continue

            if self.stnPktArrTimes[stnID][0] < minTime:
                stationID = stnID
                minTime = self.stnPktArrTimes[stnID][0]

        if stationID is None:
            # Simulation is done, no more frames
            return stationID

        # Get packet from that arrival, pop it from the deque
        # Return it in a FrameMetadata object
        return FrameMetadata(stationID, self.stnPktArrTimes[stationID].popleft())

    def rescheduleFrame(self, frameMeta):
        """
        Reschedules a frame for later by appending a new arrival at the end
        of the station's list of arrival.
        """

        assert type(frameMeta) is FrameMetadata
        stnID = frameMeta.stnID
        arrTime = frameMeta.arrTime

        assert type(stnID) is int and stnID < self.numStations
        assert type(arrTime) is float and arrTime >= 0

        # Calculate new arrival time
        interArrivalTime = 0
        while (interArrivalTime < self.serializationDelay):
            interArrivalTime = expovariate(self.arrivalRate)

        if len(self.stnPktArrTimes[stnID]) > 0:
            lastArrTime = self.stnPktArrTimes[stnID][-1]
        else:
            lastArrTime = arrTime

        self.stnPktArrTimes[stnID].append(interArrivalTime + lastArrTime)


class FrameMetadata(object):
    """
    This class holds metadata for each frame
      - stnID: Identifier of theh station that sends this frame
      - arrTime: Time at which the station generates/transmits the frame
    """

    def __init__(self, stnID, arrTime):
        assert type(stnID) is int
        assert type(arrTime) is float and arrTime >= 0
        self.stnID = stnID
        self.arrTime = arrTime

# NOTE (2020s): Currently this class is unused, leave here for future semesters
class StationMetadata(object):
    """
    This class holds metadata for each station
      - stnID: Station identifier
      - successTx: A counter to track the perceived successful transmissions
                   A station can think it successfully transmitted a frame,
                   even when that frame collided.
      - reschedCount: A counter to track the number of times this station had
                      to defer transmission and reschedule a frame
    """

    def __init__(self, stnID):
        assert type(stnID) is int
        self.stnID = stnID

        # The successTx counter tracks the number of successful transmissions
        # from the *point-of-view of this station*. If a frame collides
        # and the station does not realize it in time, it may inadvertently
        # believe it was successful.
        self.successTx = 0

        # The number of re-scheduling events
        self.reschedCount = 0

