#
# Copyright 2020 University of Toronto
#
# Permission is hereby granted, to use this software and associated
# documentation files (the "Software") in course work at the University
# of Toronto, or for personal use. Other uses are prohibited, in
# particular the distribution of the Software either publicly or to third
# parties.
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import paho.mqtt.client as channel
import json


class Client:
    def __init__(self, client_id):
        ''' The constructor method assigns initial variables values and setup the channel rx topic.'''
        #self.CHANNEL_ADDRESS = '142.150.208.252'
        self.CHANNEL_ADDRESS = '142.150.208.235'
        #self.CHANNEL_ADDRESS = '127.0.0.1'
        self.CHANNEL_PORT = 1883
        ''' Nonce is used to create a random and unique channel topic.'''
        self.TOPIC_NONCE = ''
        self.TOPIC_NONCE_POSTFIX = ''
        self.TOPIC_NONCE_PREFIX = ''
        self.CHANNEL_TOPIC = ''
        self.create_topic(client_id)
        self.face = None
        ''' The incoming_packets is an strategy to mitigate the racing condition. It must be hidden from students.'''
        self.incoming_packets = []
        self.counter = 0

    ''' This method can be used to set the defualt ip address/port used by the channel to send/receive messages.'''
    def set_channel_address(self, address=None, port=None):
        if address:
            self.CHANNEL_ADDRESS = str(address)
        if port:
            self.CHANNEL_PORT = port

    ''' This method sets a specific topic that this socket uses to send and receive data. The topic creates a virtual
    network.'''
    def create_topic(self, nonce):
        self.TOPIC_NONCE = str(nonce)
        self.CHANNEL_TOPIC = self.TOPIC_NONCE.split('/')[0] + '/#'
        self.TOPIC_NONCE_PREFIX = self.TOPIC_NONCE.split('/')[0]
        self.TOPIC_NONCE_POSTFIX = self.TOPIC_NONCE.split('/')[1]
        #print(self.TOPIC_NONCE)

    ''' This method is the default callback for the broker on_connect call and setup the rx interface.'''
    def on_connect(self, client, userdata, flags, rc):
        pass

    ''' This method is the default callback for the broker on_message call.'''
    def on_message(self, client, userdata, packet):
        topic = packet.topic.split('/')
        if topic[0] == self.TOPIC_NONCE_PREFIX:
            if topic[1] != self.TOPIC_NONCE_POSTFIX:
                ''' Check if the message is is not destined to itself. if No, it will be added to the incoming packet
                queue.'''
                self.incoming_packets.append(json.loads(str(packet.payload, encoding='utf-8')))
        #client.disconnect()

    ''' This method is used to subscribe for the channel communication.'''
    def subscribe(self):
        self.face = channel.Client(protocol=channel.MQTTv31)
        while True:
            self.face.connect(self.CHANNEL_ADDRESS, self.CHANNEL_PORT)
            self.face.on_message = self.on_message
            self.face.on_connect = self.on_connect
            self.face.subscribe(self.CHANNEL_TOPIC, qos=1)
            self.face.loop_forever()

    ''' This method passes incoming packets to the transport layer. The transport layer maintains an active call on
    this method to obtain the incoming messages once arrived.'''
    def transfer_in(self):
        ''' Monitors the queue for incoming packets and will extract and return if atleast one packet exists in the
        queue.'''
        if len(self.incoming_packets) > 0:
            return self.incoming_packets.pop(0)
        else:
            return False
