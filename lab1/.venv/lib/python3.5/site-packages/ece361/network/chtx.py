#
# Copyright 2020 University of Toronto
#
# Permission is hereby granted, to use this software and associated
# documentation files (the "Software") in course work at the University
# of Toronto, or for personal use. Other uses are prohibited, in
# particular the distribution of the Software either publicly or to third
# parties.
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import paho.mqtt.client as channel


class Client:
    def __init__(self, client_id):
        ''' The constructor method assigns initial variables values and setup the channel tx topic.'''
        #self.CHANNEL_ADDRESS = '142.150.208.252'
        self.CHANNEL_ADDRESS = '142.150.208.235'
        #self.CHANNEL_ADDRESS = '127.0.0.1'
        self.CHANNEL_PORT = 1883
        ''' Nonce is used to create a random and unique channel topic.'''
        self.TOPIC_NONCE = ''
        self.TOPIC_NONCE_PREFIX = ''
        self.TOPIC_NONCE_POSTFIX = ''
        self.create_topic(client_id)
        self.face = None

    ''' This method can be used to set the defualt ip address/port used by the channel to send/receive messages.'''
    def set_channel_address(self, address=None, port=None):
        if address:
            self.CHANNEL_ADDRESS = str(address)
        if port:
            self.CHANNEL_PORT = port

    ''' This method sets a specific topic that this socket uses to send and receive data. The topic creates a virtual
    network.'''
    def create_topic(self, nonce):
        self.TOPIC_NONCE = str(nonce)
        self.TOPIC_NONCE_PREFIX = self.TOPIC_NONCE.split('/')[0]
        self.TOPIC_NONCE_POSTFIX = self.TOPIC_NONCE.split('/')[1]
        #print(self.TOPIC_NONCE)

    ''' Its used as the default callback method from the broker.'''
    def on_publish(self, client, userdata, result):
        pass

    ''' This method is used to transmit data to the channel.'''
    def transfer_out(self, packet):
        ''' Establishing a bi-directional TCP face with the channel.'''
        self.face = channel.Client(protocol=channel.MQTTv31)
        self.face.on_publish = self.on_publish
        ''' Connecting the face to the channel (broadcast medium)'''
        self.face.connect(self.CHANNEL_ADDRESS, self.CHANNEL_PORT)
        ''' Send data to the channel.'''
        result = self.face.publish(self.TOPIC_NONCE, packet, qos=1)
        self.face.disconnect()
