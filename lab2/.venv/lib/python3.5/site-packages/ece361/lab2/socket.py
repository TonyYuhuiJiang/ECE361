#
# Copyright 2020 University of Toronto
#
# Permission is hereby granted, to use this software and associated
# documentation files (the "Software") in course work at the University
# of Toronto, or for personal use. Other uses are prohibited, in
# particular the distribution of the Software either publicly or to third
# parties.
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import socket
import datetime
from threading import Timer

class Socket(socket.socket):

    def __init__(self, destination, recvfrom_bytes, timeout = None, bind_addr = ('0.0.0.0', 0)):
        super().__init__(socket.AF_INET, socket.SOCK_DGRAM)
        self.bind(bind_addr)
        self.temp_addr = self.getsockname()
        self.destination = destination
        self.recvfrom_bytes = recvfrom_bytes
        self.__timeout = timeout
        self.msg_received = None

    def sendto(self, data):
        timer = None
        if (self.__timeout != None):
            timer = Timer(self.__timeout, Socket.__timeout_handler, args = [self])

        self.msg_received = {}

        self.t_send = datetime.datetime.now()
        super().sendto(data, self.destination)

        if (timer):
            timer.start()

    def recvfrom(self):
        self.msg_received = {}
        self.msg_received['message'], self.msg_received['address'] = super().recvfrom(self.recvfrom_bytes)
        self.t_ack = datetime.datetime.now()

    def __timeout_handler(self):
        # send a message to itself to unblock socket
        try:
            super().sendto(b'', self.temp_addr)
        except socket.error:
            # this is OK, which means socket has already been closed
            pass
